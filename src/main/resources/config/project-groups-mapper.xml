<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="itwise.coreasset.shaman.api.mapper.ProjectGroupMapper">

	<sql id="select_table">
		SELECT idx, name, description, reg_date FROM project_groups
	</sql>

	<insert id="insert" parameterType="ProjectGroup" useGeneratedKeys="true" keyProperty="idx">
		INSERT INTO 
			project_groups (name, description, reg_date)
		VALUES
			(#{name}, #{description}, now())

	</insert>
	

	<delete id="delete" parameterType="ProjectGroup">
		DELETE FROM project_groups
		WHERE 
			idx = #{idx}
	</delete>
	
	<update id="update" parameterType="map">
		UPDATE project_groups 
		<set>
			<if test="projectGroup.name != null">name = #{projectGroup.name},</if>
			<if test="projectGroup.description != null">description = #{projectGroup.description},</if>
		</set>
		WHERE 
			idx = #{idx}
	</update>

	<resultMap id="ProjectGroupMap" type="ProjectGroup">
		<id property="idx" column="idx" />
		<result property="name" column="name"/>
		<result property="description" column="description"/>
		<result property="regDate" column="reg_date" jdbcType="DATE" javaType="java.util.Date"/>
	</resultMap>

	<resultMap id="ProjectGroupHasProjectMap" extends="ProjectGroupMap" type="ProjectGroup">
		<collection property="projects" column="idx" javaType="ArrayList" ofType="Project" select="hasProjects" />
	</resultMap>
	
	<select id="isExist" resultType="int" >
		select result from (
			SELECT IFNULL(idx,0) as result, count(idx) as cnt FROM project_groups
			WHERE
				0 = 0
				<if test="_parameter.containsKey('idx')">
					<if test="idx != null"> and idx = #{idx}</if>
				</if>
				<if test="_parameter.containsKey('keyword')">
					<if test="keyword != null"> and name = #{keyword}</if>
				</if>
		) as a
	</select>
	
	<select id="count" parameterType="String" resultType="int">
		SELECT count(idx) as cnt FROM project_groups
		<if test="keyword != null">
		WHERE
			name like '%${keyword}%'
			or description like '%${keyword}%'
		</if>
	</select>

	<insert id="addHasProject" parameterType="map">
		insert into groups_has_projects
		(prj_idx, grp_idx)
		values (#{prj_idx}, #{grp_idx})
	</insert>

	<delete id="delHasProject" parameterType="map">
		delete from groups_has_projects
		where
			prj_idx = #{prj_idx}
			and grp_idx = #{grp_idx}
	</delete>
	
	<select id="hasProjects" resultMap="itwise.coreasset.shaman.api.mapper.ProjectMapper.ProjectMap">
		SELECT 
			idx, name, description, reg_date 
		FROM projects as a
		inner join groups_has_projects as b on a.idx = b.prj_idx
		where
			b.grp_idx = #{idx}
	</select>
			
	<select id="findOne" resultMap="ProjectGroupHasProjectMap">
		SELECT idx, name, description , reg_date FROM project_groups
		WHERE
			0 = 0
			<if test="_parameter.containsKey('idx')">
				<if test="idx != null"> and idx = #{idx}</if>
			</if>
			<if test="_parameter.containsKey('name')">
				<if test="name!= null"> and name = #{name}</if>
			</if>
	</select>

	<select id="findList" parameterType="map" resultMap="ProjectGroupMap">
		SELECT 
			a.idx, a.name, a.description , a.reg_date
			,count(b.prj_idx) as prj_count 
		FROM project_groups as a 
		left outer join groups_has_projects as b on a.idx = b.grp_idx
		<if test="_parameter.containsKey('keyword')">
			<if test="keyword != null">
			where
				name like '%${keyword}%'
				or description like '%${keyword}%'
			</if>
		</if>
		
		group by a.idx
		order by 
		
		<choose>
			<when test="_parameter.containsKey('order_column') and _parameter.containsKey('order_dir')">
				${order_column} ${order_dir}
			</when>
			<otherwise>
				a.idx desc
			</otherwise>
		</choose>
		
		limit 
			#{offset}, #{limit}
	</select>
</mapper>
